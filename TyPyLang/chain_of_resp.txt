┌─── MAIN ──────────────────────────────────────
│
├─┬─ Check if a file is uploaded
│ └─┬─ Check if the uploaded file has a `.tpy` extension
│   └─┬─ Open file for reading as `var`
│      └─┬─ Create AST tree from source with step into `parse_source`
│         ├─┬─ Start parsing new syntax to old with step into `preprocess_source`
│         │ ├── Convert TyPy syntax to Python:
│         │ │   ├── Replace `variable?: Type` → `Optional[Type]`
│         │ │   ├── Process `readonly` → `__readonly_check__()`
│         │ │   ├── Convert `interface` → class with `__is_interface__`
│         │ │   ├── Transform `enum` → Enum subclass
│         │ │   ├── Handle `as` type casts → `cast()`
│         │ │   └── Process generics → TypeVar
│         │ └── Strict mode validation:
│         │     ├── Check all assignments have type hints
│         │     └── Verify function signature annotations
│         └─┬─ Step out to `parse_source` from `preprocess_source` with new `var`
│           └── Parse the entire tree using the AST library
│               └─┬─ Perform AST transformations:
│                 ├── Add @type_checked decorators
│                 ├── Replace AnnAssign with type checks
│                 └── Validate return statements
│───────────────────────────────────────────────
├─┬─ Step out to `main` from `parse_source`
│ └─┬─ Start compiling code with the `exec` flag
│   └─┬─ Create runtime environment with step into `FILE` runtime (imports variables):
│      ├─┬─ Environment setup:
│      │ ├── StrictGlobals with readonly registry
│      │ ├── Access_controlled decorator
│      │ └── Enum base class support
│      ├─┬─ `type_checked()`
│      │ ├── Validate argument types
│      │ ├── Check return type
│      │ └── Handle generics and unions
│      ├─┬─ `implements()`
│      │ ├── Interface requirement gathering
│      │ ├── Runtime implementation check
│      │ └── Dynamic __init__ modification
│      ├─┬─ AST Transformer:
│      │ ├── TyPyTransformer logic
│      │ └── Node replacement pipeline
│      ├─┬─ Error handling:
│      │ ├── SyntaxError for invalid interfaces
│      │ ├── TypeError for readonly violations
│      │ └── AttributeError for access control
│      └─┬─ Special features:
│         ├── Auto-casting system
│         ├── Type assertion checks
│         └── Registry for readonly vars
│───────────────────────────────────────────────
└─┬─ Run code with the new environment
  ├── Execute transformed AST
  └─┬─ Runtime checks:
     ├── Access control validation
     ├── Interface contract enforcement
     └── Readonly variable protection